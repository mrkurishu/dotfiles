# Note on Image Previews
# For those wanting image previews, there are a few steps to set it up:
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope) should generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script that creates the environment for ueberzug.

# Basic variables
set shellopts '-eu'
#Sets the internal field separator to newline, making it handle filenames with spaces correctly.
set ifs "\n"
#Sets the number of lines to keep visible above and below the cursor.
set scrolloff 10
#Enables icons for file types (you need a compatible terminal for this to work).
set icons
#Defines how often the preview updates (e.g., for image previews).
set period 1
#Specifies patterns for hidden files to ignore
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
#Path to a cleaner script (likely used for file cleanup).
set cleaner '~/.config/lf/cleaner'
#Path to the script used for previewing files
set previewer '~/.config/lf/scope'
#Ensures that the shell exits on error (-e) and treats unset variables as an error (-u).
set autoquit true

# Commands/Functions
# Spreadsheets:libreoffice calc,PDF:zathura, XCF files:Gimp, Images: nsxiv
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) libreoffice --calc $fx ;;
        image/vnd.djvu|application/pdf|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
        image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
        image/svg+xml) display -- $f ;;
        image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
            setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
                [ -z "$file" ] && continue
                lf -remote "send select \"$file\""
                lf -remote "send toggle"
            done &
            ;;
        audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR $fx ;;
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        application/octet-stream) case ${f##*.} in
            doc|docx|xls|xlsx|odt|ppt|pptx) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
            ghw) setsid -f gtkwave $f >/dev/null 2>&1 ;;
            ts) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
            *) setsid -f zathura $fx >/dev/null 2>&1 ;;
        esac ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

# Create parent directories
cmd mkdir $mkdir -p "$@"

# Extract file
cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N]"
    read ans
    [ "$ans" = "y" ] && {
        case $fx in
            *.tar.bz2)   tar xjf $fx     ;;
            *.tar.gz)    tar xzf $fx     ;;
            *.bz2)       bunzip2 $fx     ;;
            *.rar)       unrar e $fx     ;;
            *.gz)        gunzip $fx      ;;
            *.tar)       tar xf $fx      ;;
            *.tbz2)      tar xjf $fx     ;;
            *.tgz)       tar xzf $fx     ;;
            *.zip)       unzip $fx       ;;
            *.Z)         uncompress $fx  ;;
            *.7z)        7z x $fx        ;;
            *.tar.xz)    tar xf $fx      ;;
        esac
    }
}}

# Deletes a file or directory after asking for confirmation (y/N).
cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ "$ans" = "y" ] && rm -rf -- $fx
}}

# Moves selected files to a target directory chosen through fzf (a command-line fuzzy finder). Uses a list of bookmarked directories (bm-dirs).
cmd moveto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Move to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval mv -iv \"$x\" \"$dest\"
    done &&
    notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

# Similar to moveto, but it copies files to the selected directory.
cmd copyto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Copy to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval cp -ivr \"$x\" \"$dest\"
    done &&
    notify-send "ðŸ“‹ File(s) copied." "File(s) copied to $dest."
}}
# Sets the background image to the selected file. This could be used for setting a wallpaper.
cmd setbg "$1"
# A utility for renaming multiple files. It opens a temporary file with the current filenames, allows you to edit them in a text editor, and then renames them based on the changes.
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# Key Bindings map
# Select a file via fzf and then select it in lf.
map <c-f> $lf -remote "send $id select \"$(fzf)\""
#Navigate to a bookmarked directory (bm-dirs).
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map H cd ~
map g top
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>""<left>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename
map b $setbg $f

map <c-e> down
map <c-y> up
map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1

map U $printf "%s" "$fx" | xclip -selection clipboard
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard
map . $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/www.youtube.com\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
map <gt> $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/piped.video\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
map T $nsxiv -t "$(pwd)" # opens thumbnail mode
map <c-l> unselect
